This is a benchmark to see how much slower ResourceHashtable will
be if we change the SIZE from a build-time constant to a runtime-configurable
parameter.

Please "diff resourceHash.hpp resourceHashNew.hpp" to see the differences.


For a simple loop that calls ResourceHashtable::get():

build-time constant            = 0:02.72
runtime-configurable param     = 0:05.26 (about 1/2 slower)


This was executed on "Intel(R) Xeon(R) CPU E5-2665 0 @ 2.40GHz"

=============== modulo with const
time ./test 0 100000000
which = 0 v = 333150064816
0.35user 0.00system 0:00.35elapsed 99%CPU (0avgtext+0avgdata 2832maxresident)k
0inputs+0outputs (0major+137minor)pagefaults 0swaps

=============== modulo with variable
time ./test 1 100000000
which = 1 v = 333150064816
1.13user 0.00system 0:01.13elapsed 100%CPU (0avgtext+0avgdata 2668maxresident)k
0inputs+0outputs (0major+136minor)pagefaults 0swaps

=============== original ResourceHash with const SIZE == resourceHash.hpp
time ./test 2 100000000
which = 2 v = 1000000000
2.70user 0.00system 0:02.70elapsed 99%CPU (0avgtext+0avgdata 2752maxresident)k
0inputs+0outputs (0major+154minor)pagefaults 0swaps

=============== naive ResourceHash with variable _size == resourceHashNew.hpp
time ./test 3 100000000
which = 3 v = 1000000000
5.24user 0.00system 0:05.24elapsed 99%CPU (0avgtext+0avgdata 2760maxresident)k
0inputs+0outputs (0major+164minor)pagefaults 0swaps

=============== extensible ResourceHash with const SIZE == resourceHashX.hpp
time ./test 4 100000000
which = 4 v = 1000000000
2.72user 0.00system 0:02.72elapsed 99%CPU (0avgtext+0avgdata 2720maxresident)k
0inputs+0outputs (0major+163minor)pagefaults 0swaps

=============== extensible ResourceHash with variable SIZE == resourceHashX.hpp
time ./test 5 100000000
which = 5 v = 1000000000
5.29user 0.00system 0:05.29elapsed 100%CPU (0avgtext+0avgdata 2756maxresident)k
0inputs+0outputs (0major+167minor)pagefaults 0swaps

Reason:

Run "make test" and look at test.s:


modulo with a constant -- gcc avoids using the expensive divq instruction

	movq	%r8, %rax
	addq	$1, %rcx
	mulq	%rsi
	shrq	$12, %rdx
	imulq	$6661, %rdx, %rax
	movq	%r8, %rdx

modulo with a variable -- gcc has to use divq

	movq	%r8, %rax
	xorl	%edx, %edx
	addq	$1, %rcx
	divq	%rdi

